{
	"info": {
		"_postman_id": "39e9d456-dc9b-4119-b18c-acf0376c7725",
		"name": "Team02_Request_Rockstars",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42933875",
		"_collection_link": "https://lively-meadow-587913.postman.co/workspace/Team-02-Request-RockStars~4fb76516-e265-4f94-8686-bd3145b47574/collection/42925569-39e9d456-dc9b-4119-b18c-acf0376c7725?action=share&source=collection_link&creator=42933875"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login Csv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"if(pm.response.code == 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"token\", jsonData.token);\r",
									"}\r",
									"\r",
									"console.log(\"Login CSV - Completed test case:\" + pm.iterationData.get('TestCase_ID'));\r",
									"\r",
									"var statusline = pm.iterationData.get('expectedstatusline');\r",
									"pm.test(\"expectedstatusline\" + pm.response.status, ()=>{\r",
									"    pm.response.to.have.status(statusline);\r",
									"})\r",
									"var expectedStatusCode = pm.iterationData.get('Response_Status_Code');\r",
									"pm.test(\"status code is \" + pm.response.status,() => {\r",
									"    pm.response.to.have.status(expectedStatusCode);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"    // If the test case is not related to Program POST, we will skip the execution\r",
									"    if (!TestCaseID.startsWith('L_POST')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"\r",
									"    // if (TestCaseID != 'L_POST_TC_04') { // Do not set token for test case 04, as it is No Auth validation case\r",
									"    //     pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization')\r",
									"    // }\r",
									" \r",
									"// Set the url using base url and endpoint from excel\r",
									"if (TestCaseID.startsWith('L_')) {\r",
									"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"userLoginEmailId\": \"{{userLoginEmail}}\",\r\n\"password\": \"{{password}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "POST Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"if(pm.response.code == ('201')){\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    var TestCaseId = pm.iterationData.get('TestCase_ID')\r",
									"    if (TestCaseId == 'P_POST_TC_01') {\r",
									"    pm.environment.set(\"program1_id\", jsonData.programId);\r",
									"    }\r",
									"    else if(TestCaseId == ('P_POST_TC_02')){\r",
									"        pm.environment.set(\"Programname\",jsonData.programName);\r",
									"    }\r",
									"    else if(TestCaseId == ('P_POST_TC_03')){\r",
									"        pm.environment.set(\"program2_id\", jsonData.programId);\r",
									"    }\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"    // If the test case is not related to Program POST, we will skip the execution\r",
									"    if (!TestCaseID.startsWith('P_POST')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"\r",
									"    if (TestCaseID != 'P_POST_TC_04') { // Do not set token for test case 04, as it is No Auth validation case\r",
									"        pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization')\r",
									"    }\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"programDescription\": \"{{ProgramDescription}}\",\r\n    \"programName\": \"{{ProgramName}}\",\r\n    \"programStatus\": \"{{ProgramStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"    // If the test case is not related to Program GET, we will skip the execution\r",
									"    if (!TestCaseID.startsWith('P_GET')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"\r",
									"    if(TestCaseID == 'P_GET_TC_09' || TestCaseID == 'P_GET_TC_13'|| TestCaseID == 'P_GET_TC_18') { //for invalid method name\r",
									"        pm.request.method = 'POST'\r",
									"    }\r",
									"\r",
									"    if(TestCaseID == 'P_GET_TC_15' || TestCaseID == 'P_GET_TC_17'|| TestCaseID == 'P_GET_TC_18') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"program2_id\");\r",
									"    }\r",
									"\r",
									"    // Do not set token for test cases, as it is No Auth validation case\r",
									"    if (TestCaseID != 'P_GET_TC_10'&& TestCaseID !='P_GET_TC_14' && TestCaseID != 'P_GET_TC_17') { \r",
									"        pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization')\r",
									"    }\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"    // If the test case is not related to Program PUT, we will skip the execution\r",
									"    if (!TestCaseID.startsWith('P_PUT')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"    if(TestCaseID == 'P_PUT_TC_21') {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"     if(TestCaseID == 'P_PUT_TC_25') {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"     if(TestCaseID == 'P_PUT_TC_19') { // Valid endpoint program name\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"Programname\");\r",
									"    }\r",
									"    // Do not set token for test cases, as it is No Auth validation case\r",
									"    if (TestCaseID != 'P_PUT_TC_22' && TestCaseID != 'P_PUT_TC_26' ) { \r",
									"        pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization')\r",
									"    }\r",
									"    if(TestCaseID == 'P_PUT_TC_23') { // valid endpoint program ID\r",
									"         pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"program2_id\");\r",
									"    }\r",
									"    \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"programDescription\": \"{{ProgramDescription}}\",\r\n    \"programName\": \"{{ProgramName}}\",\r\n    \"programStatus\": \"{{ProgramStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT empty body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"    if(TestCaseID == 'P_PUT_TC_21') { // Valid endpoint\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"Programname\");\r",
									"    }\r",
									"    else if(TestCaseID == 'P_PUT_TC_25' ) { // valid endpoint\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"program2_id\");\r",
									"    }\r",
									"    else {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"    console.log(\"Setting auth token\");\r",
									"    pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization');\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"    // If the test case is not related to Program Delete, we will skip the execution\r",
									"    if (!TestCaseID.startsWith('P_DEL')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"    if(TestCaseID == 'P_DEL_TC_28' || TestCaseID == 'P_DEL_TC_29') { // Valid endpoint program ID\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"program2_id\");\r",
									"    }\r",
									"     // Do not set token for test cases, as it is No Auth validation case\r",
									"    if (TestCaseID != 'P_DEL_TC_28' && TestCaseID != 'P_DEL_TC_31' ) { \r",
									"        pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization')\r",
									"    }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
							"\r",
							"// If the test case is not related to Program, we will skip the execution\r",
							"if (!TestCaseID.startsWith('P_')) {\r",
							"    pm.execution.skipRequest();\r",
							"}\r",
							"\r",
							"// Set the url using base url and endpoint from excel\r",
							"if (TestCaseID.startsWith('P_')) {\r",
							"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"console.log(\"Completed test case:\" + pm.iterationData.get('TestCase_ID'));\r",
							"\r",
							"var statusline = pm.iterationData.get('expectedstatusline');\r",
							"pm.test(\"expectedstatusline\" + pm.response.status, ()=>{\r",
							"    pm.response.to.have.status(statusline);\r",
							"})\r",
							"\r",
							"var expectedStatusCode = pm.iterationData.get('Response_Status_Code');\r",
							"pm.test(\"status code is \" + pm.response.status,() => {\r",
							"    pm.response.to.have.status(expectedStatusCode);\r",
							"});\r",
							"\r",
							"// schema for new prog,get all prog,get prog by ID, get prog by progName\r",
							"var singleProgramSchema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"programId\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"programName\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"programDescription\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"programStatus\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"creationTime\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastModTime\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"programId\",\r",
							"    \"programName\",\r",
							"    \"programDescription\",\r",
							"    \"programStatus\",\r",
							"    \"creationTime\",\r",
							"    \"lastModTime\"\r",
							"  ]\r",
							"}\r",
							"// schema for get all prog with users\r",
							"var arrayProgramSchema = \r",
							"{\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"programId\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"programName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"programDescription\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"programStatus\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"creationTime\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"lastModTime\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"programId\",\r",
							"        \"programName\",\r",
							"        \"programDescription\",\r",
							"        \"programStatus\",\r",
							"        \"creationTime\",\r",
							"        \"lastModTime\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"// schema for update prog by program name and program ID\r",
							"var arrayProgramWithUsersSchema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"programId\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"programName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"programDescription\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"programStatus\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"programUsers\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"object\",\r",
							"              \"properties\": {\r",
							"                \"userId\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userFirstName\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userLastName\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userMiddleName\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userPhoneNumber\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userLocation\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userTimeZone\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userLinkedinUrl\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userEduUg\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userEduPg\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userComments\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userVisaStatus\": {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                \"userLoginEmail\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"required\": [\r",
							"                \"userId\",\r",
							"                \"userFirstName\",\r",
							"                \"userLastName\",\r",
							"                \"userMiddleName\",\r",
							"                \"userPhoneNumber\",\r",
							"                \"userLocation\",\r",
							"                \"userTimeZone\",\r",
							"                \"userLinkedinUrl\",\r",
							"                \"userEduUg\",\r",
							"                \"userEduPg\",\r",
							"                \"userComments\",\r",
							"                \"userVisaStatus\",\r",
							"                \"userLoginEmail\"\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"creationTime\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"lastModTime\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"programId\",\r",
							"        \"programName\",\r",
							"        \"programDescription\",\r",
							"        \"programStatus\",\r",
							"        \"programUsers\",\r",
							"        \"creationTime\",\r",
							"        \"lastModTime\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"// validate the schema as per the test caes ID\r",
							"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
							"\r",
							"if(TestCaseID == 'P_POST_TC_01' || TestCaseID == 'P_POST_TC_02' || TestCaseID == 'P_POST_TC_03' || TestCaseID == 'P_GET_TC_15' || TestCaseID == 'P_PUT_TC_19' || TestCaseID == 'P_PUT_TC_23') {\r",
							"    pm.test('Schema validation', () => {\r",
							"        pm.response.to.have.jsonSchema (singleProgramSchema);\r",
							"    });\r",
							"}\r",
							"if(TestCaseID == 'P_GET_TC_07') {\r",
							"    pm.test('Schema validation', () => {\r",
							"        pm.response.to.have.jsonSchema (arrayProgramSchema);\r",
							"    });\r",
							"}\r",
							"if(TestCaseID == 'P_GET_TC_11') {\r",
							"    pm.test('Schema validation', () => {\r",
							"        pm.response.to.have.jsonSchema (arrayProgramWithUsersSchema);\r",
							"    });\r",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Batch_Post_Positive",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");",
									"//if (TestCaseID.startsWith('B_')) { // Only program related test cases",
									"",
									"    // If the test case is not related to Program POST, we will skip the execution",
									"    // if (!TestCaseID.startsWith('B_POST')) {",
									"    //     pm.execution.skipRequest();",
									"    // }",
									"",
									"",
									"    if (TestCaseID == ('B_POST_TC_00')){ // setting auth for testcase B_POST_TC",
									"        pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization')",
									"    }",
									"    else{",
									"        pm.execution.skipRequest();",
									"    }",
									"    ",
									"//}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code == ('201')){",
									"    var jsonData = pm.response.json();",
									"",
									"    var TestCaseId = pm.iterationData.get('TestCase_ID')",
									"    if(TestCaseId == ('B_POST_TC')){",
									"        pm.environment.set(\"Batch1_id\", jsonData.batchId);",
									"    }",
									"        ",
									"  ",
									"",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"batchDescription\":\"{{batchDescription}}\",\n\"batchName\": \"{{batchName}}\",\n\"batchNoOfClasses\":\"{{batchNoOfClasses}}\" ,\n\"batchStatus\": \"{{batchStatus}}\",\n\"programId\": {{program1_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{Endpoint}}",
							"host": [
								"{{base_url}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_GetRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response time is less than 1000 ms\",()=>{",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									" });",
									" ",
									"pm.test(\"Status Code matches expected\", function () {",
									"    pm.response.to.have.status(parseInt(pm.iterationData.get(\"Response_Status_Code\")));",
									"});",
									"pm.test(\"Status line is correct\", function () {",
									"    pm.expect(pm.response.status).to.eql(pm.iterationData.get(\"expectedstatusline\"));",
									"});",
									"pm.test(\"Validate Response Format Based on Status Code\", function () {",
									"    let statusCode = pm.response.code;",
									"",
									"    if (statusCode == 200) { // Created",
									"        pm.test(\"Response should be in JSON format for 200\", function () {",
									"            pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"            pm.response.json(); // Ensures response is valid JSON",
									"        });",
									"    } ",
									"    else if (statusCode == 400) { // Bad Request",
									"        pm.test(\"Response should be in JSON format for 400\", function () {",
									"            pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"            pm.response.json(); // Ensures response is valid JSON",
									"        });",
									"    } ",
									"    else if (statusCode == 405) { // Method Not Allowed",
									"        pm.test(\"Response should be in JSON format for 405\", function () {",
									"            pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"            pm.response.json(); // Ensures response is valid JSON",
									"        });",
									"    } ",
									"    else if (statusCode == 401) { // Unauthorized",
									"        pm.test(\"Response should be in JSON format for 401\", function () {   ",
									"         pm.expect(pm.response.headers.get(\"Content-Length\")).to.equal(\"0\");",
									"        console.log(\"Response Body:\", pm.response.text());",
									"        });",
									"    } ",
									"    ",
									"    else if (statusCode == 404) { // Not Found",
									"         pm.test(\"Response should be in Plain Text format for 404\", function () {",
									"            ",
									"            console.log(\"Response Body:\", pm.response.text());",
									"         });",
									"       ",
									"    } ",
									"    else {",
									"        pm.test(\"Unexpected status code: \" + statusCode, function () {",
									"            pm.expect(false).to.be.true; // Forces failure if status is unexpected",
									"        });",
									"    }",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//var TestCaseID = pm.iterationData.get(\"TestCase_ID\");",
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");",
									"",
									"//  If the test case is not related to Batch, we will skip the execution",
									"if (!TestCaseID.startsWith('B_GET')) {",
									"    pm.execution.skipRequest();",
									"}",
									"",
									"if (TestCaseID.startsWith('B_')) { // Only program related test cases",
									"",
									"    if (TestCaseID == 'B_GET_TC_12' || TestCaseID == 'B_GET_TC_20' ||  TestCaseID == 'B_GET_TC_28') {",
									"        pm.request.method='POST'",
									"    }",
									"    if (TestCaseID == 'B_GET_TC_04') {",
									"        pm.request.method='DELETE'",
									"    }",
									"",
									"    //Do not set token for test cases, as it is No Auth validation case",
									"    if (TestCaseID != 'B_GET_TC_05'&& TestCaseID !='B_GET_TC_13'&& TestCaseID != 'B_GET_TC_21' && TestCaseID != 'B_GET_TC_29') { ",
									"        pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization')",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}{{Endpoint}}",
							"host": [
								"{{base_url}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_Delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");",
									"",
									"// If the test case is not related to Program POST, we will skip the execution",
									"if (!TestCaseID.startsWith('B_DEL')) {",
									"    pm.execution.skipRequest();",
									"}",
									"",
									"if (TestCaseID.startsWith('B_')) { // Only program related test cases",
									"    if (TestCaseID != 'B_DEL_TC_37') { // Do not set token for test case 37, as it is No Auth validation case",
									"        pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization')",
									"    }",
									"}",
									"if (TestCaseID == 'B_DEL_TC_36')",
									"{",
									"    pm.request.method='POST'",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code matches expected\", function () {",
									"    pm.response.to.have.status(parseInt(pm.iterationData.get(\"Response_Status_Code\")));",
									"});",
									"pm.test(\"Status line is correct\", function () {",
									"    pm.expect(pm.response.status).to.eql(pm.iterationData.get(\"expectedstatusline\"));",
									"});",
									"",
									"pm.test(\"Validate Response Format Based on Status Code\", function () {",
									"    let statusCode = pm.response.code;",
									"   ",
									"    if (statusCode == 200) { ",
									"        pm.test(\"Response should be in JSON format for 200\", function () {",
									"            pm.response.to.have.header(\"Content-Type\", \"application/json\");          ",
									"             pm.response.text();// Ensures response is valid JSON",
									"            ",
									"        });",
									"    } ",
									"    else if (statusCode == 401) { // Unauthorized",
									"        pm.test(\"Response should be in JSON format for 401\", function () {   ",
									"            pm.expect(pm.response.headers.get(\"Content-Length\")).to.equal(\"0\");",
									"        });",
									"    } ",
									"    else if (statusCode == 405) { // Method Not Allowed",
									"        pm.test(\"Response should be in JSON format for 405\", function () {",
									"            pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"            pm.response.json(); // Ensures response is valid JSON",
									"        });",
									"    }",
									"    else if (statusCode == 404) { // Not Found",
									"         pm.test(\"Response should be in json format for 404\", function () {",
									"            //  pm.response.to.have.header(\"Content-Type\", \"text/plain;charset=UTF-8\");",
									"            //  pm.response.text();",
									"            console.log(\"Response Body:\", pm.response.text());",
									"         });",
									"    }",
									"    else {",
									"        pm.test(\"Unexpected status code: \" + statusCode, function () {",
									"            pm.expect(false).to.be.true; // Forces failure if status is unexpected",
									"        });",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}{{Endpoint}}{{PutBatch_id}}",
							"host": [
								"{{base_url}}{{Endpoint}}{{PutBatch_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_Post",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");",
									"",
									"// If the test case is not related to Program POST, we will skip the execution",
									"if (!TestCaseID.startsWith('B_POST')) {",
									"    pm.execution.skipRequest();",
									"}",
									"",
									"if (TestCaseID.startsWith('B_')) { // Only program related test cases",
									"    if (TestCaseID != 'B_POST_TC_64') { // Do not set token for test case 64, as it is No Auth validation case",
									"        pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization')",
									"    }",
									"}",
									"",
									"if (TestCaseID == 'B_POST_TC_63') {",
									"    pm.request.method='DELETE'",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code == ('201')){",
									"var jsonData = pm.response.json();",
									"",
									"    var TestCaseId = pm.iterationData.get('TestCase_ID')",
									"    if(TestCaseId == ('B_POST_TC_40')){",
									"        pm.environment.set(\"Batch1_id\", jsonData.batchId);",
									"    }",
									"    else if(TestCaseId == ('B_POST_TC_40')){",
									"        pm.environment.set(\"BatchName1\",jsonData.batchName);",
									"    }",
									"",
									"else if(TestCaseId == ('B_POST_TC_41')){",
									"        pm.environment.set(\"Batch2_id\",jsonData.batchId);",
									"    }",
									"    else if(TestCaseId == ('B_POST_TC_41')){",
									"        pm.environment.set(\"BatchName2\",jsonData.batchName);",
									"    }",
									"}",
									"",
									"pm.test(\"Status Code matches expected\", function () {",
									"    pm.response.to.have.status(parseInt(pm.iterationData.get(\"Response_Status_Code\")));",
									"});",
									"pm.test(\"Status line is correct\", function () {",
									"    pm.expect(pm.response.status).to.eql(pm.iterationData.get(\"expectedstatusline\"));",
									"});",
									"",
									"pm.test(\"Validate Response Format Based on Status Code\", function () {",
									"    let statusCode = pm.response.code;",
									"",
									"    if (statusCode == 201) { // Created",
									"        pm.test(\"Response should be in JSON format for 201\", function () {",
									"            pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"            pm.response.json(); // Ensures response is valid JSON",
									"        });",
									"    } ",
									"    else if (statusCode == 400) { // Bad Request",
									"        pm.test(\"Response should be in JSON format for 400\", function () {",
									"            pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"            pm.response.json(); // Ensures response is valid JSON",
									"        });",
									"    } ",
									"    else if (statusCode == 405) { // Method Not Allowed",
									"        pm.test(\"Response should be in JSON format for 405\", function () {",
									"            pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"            pm.response.json(); // Ensures response is valid JSON",
									"        });",
									"    } ",
									"    else if (statusCode == 401) { // Unauthorized",
									"        pm.test(\"Response should be in JSON format for 401\", function () {   ",
									"            pm.expect(pm.response.headers.get(\"Content-Length\")).to.equal(\"0\");",
									"        });",
									"    } ",
									"    ",
									"    else if (statusCode == 404) { // Not Found",
									"         pm.test(\"Response should be in Plain Text format for 404\", function () {",
									"             pm.response.to.have.header(\"Content-Type\", \"text/plain;charset=UTF-8\");",
									"             pm.response.text();",
									"         });",
									"       ",
									"    } ",
									"    else {",
									"        pm.test(\"Unexpected status code: \" + statusCode, function () {",
									"            pm.expect(false).to.be.true; // Forces failure if status is unexpected",
									"        });",
									"    }",
									"});",
									"",
									"const Ajv = require(\"ajv\");",
									"const ajv = new Ajv();",
									"",
									"// Define the expected schema",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"batchDescription\": { \"type\": \"string\" },",
									"        \"batchId\": { \"type\": \"integer\" },",
									"        \"batchName\": { \"type\": \"string\" },",
									"        \"batchNoOfClasses\": { \"type\": \"integer\" },",
									"        \"batchStatus\": { \"type\": \"string\" },",
									"        \"programId\": { \"type\": \"integer\" },",
									"        \"programName\": { \"type\": \"string\" }",
									"    },",
									"    \"required\": [\"batchName\", \"batchNoOfClasses\", \"programId\", \"batchStatus\"]",
									"};",
									"",
									"// Get request & response body",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const responseBody = pm.response.json();",
									"",
									"// Log for debugging",
									"console.log(\"Request Body:\", requestBody);",
									"console.log(\"Response Body:\", responseBody);",
									"",
									"// Check status code",
									"// pm.test(\"Status code is 201 Created\", function () {",
									"//     pm.response.to.have.status(201);",
									"// });",
									"",
									"// Validate schema if status is 201",
									"if (pm.response.code == 201) {",
									"    pm.test(\"Response matches expected schema\", function () {",
									"        const validate = ajv.compile(schema);",
									"        const valid = validate(responseBody);",
									"        if (!valid) {",
									"            console.error(validate.errors);",
									"        }",
									"        pm.expect(valid, `Schema validation failed: ${JSON.stringify(validate.errors, null, 2)}`).to.be.true;",
									"    });",
									"",
									"    // Validate that response matches request",
									"    pm.test(\"Validate batchDescription matches request\", function () {",
									"        pm.expect(responseBody.batchDescription).to.equal(requestBody.batchDescription,",
									"            `Batch Description mismatch. Expected: ${requestBody.batchDescription}, Actual: ${responseBody.batchDescription}`);",
									"    });",
									"",
									"    pm.test(\"Validate batchName matches request\", function () {",
									"        pm.expect(responseBody.batchName).to.equal(requestBody.batchName,",
									"            `Batch Name mismatch. Expected: ${requestBody.batchName}, Actual: ${responseBody.batchName}`);",
									"    });",
									"",
									"    pm.test(\"Validate batchNoOfClasses matches request\", function () {",
									"        pm.expect(responseBody.batchNoOfClasses).to.equal(requestBody.batchNoOfClasses,",
									"            `Batch No Of Classes mismatch. Expected: ${requestBody.batchNoOfClasses}, Actual: ${responseBody.batchNoOfClasses}`);",
									"    });",
									"",
									"    pm.test(\"Validate programId matches request\", function () {",
									"        pm.expect(responseBody.programId).to.equal(requestBody.programId,",
									"            `Program Id mismatch. Expected: ${requestBody.programId}, Actual: ${responseBody.programId}`);",
									"    });",
									"",
									"    pm.test(\"Validate batchStatus matches request\", function () {",
									"        pm.expect(responseBody.batchStatus).to.equal(requestBody.batchStatus,",
									"            `Batch Status mismatch. Expected: ${requestBody.batchStatus}, Actual: ${responseBody.batchStatus}`);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"batchDescription\":\n\"{{batchDescription}}\",\n\"batchName\": \"{{batchname}}\",\n\"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\n\"batchStatus\": \"{{batchStatus}}\",\n\"programId\": \"{{programId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{Endpoint}}",
							"host": [
								"{{base_url}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Batch_PUT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");",
									"",
									"// If the test case is not related to Program POST, we will skip the execution",
									"if (!TestCaseID.startsWith('B_PUT')) {",
									"    pm.execution.skipRequest();",
									"}",
									"",
									"if (TestCaseID.startsWith('B_')) { // Only program related test cases",
									"    if (TestCaseID != 'B_PUT_TC_91') { // Do not set token for test case 91, as it is No Auth validation case",
									"        pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization')",
									"    }",
									"}",
									"",
									"if (TestCaseID == 'B_PUT_TC_90') {",
									"    pm.request.method='POST'",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"    var TestCaseId = pm.iterationData.get('TestCase_ID')",
									"    if(TestCaseId == ('B_PUT_TC_67')){",
									"        pm.environment.set(\"PutBatch_id\", pm.response.json().batchId);",
									"    }",
									"   ",
									"pm.test(\"Status Code matches expected\", function () {",
									"    pm.response.to.have.status(parseInt(pm.iterationData.get(\"Response_Status_Code\")));",
									"});",
									"pm.test(\"Status line is correct\", function () {",
									"    pm.expect(pm.response.status).to.eql(pm.iterationData.get(\"expectedstatusline\"));",
									"});",
									"",
									"pm.test(\"Validate Response Format Based on Status Code\", function () {",
									"    let statusCode = pm.response.code;",
									"",
									"    if (statusCode == 200) { // Created",
									"        pm.test(\"Response should be in JSON format for 200\", function () {",
									"            pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"            pm.response.json(); // Ensures response is valid JSON",
									"        });",
									"    } ",
									"    else if (statusCode == 401) { // Unauthorized",
									"        pm.test(\"Response should be in JSON format for 401\", function () {   ",
									"            pm.expect(pm.response.headers.get(\"Content-Length\")).to.equal(\"0\");",
									"        });",
									"    } ",
									"    else if (statusCode == 400) { // Bad Request",
									"        // pm.test(\"Response should be in JSON format for 400\", function () {",
									"        //     pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"        //     //pm.response.json(); // Ensures response is valid JSON",
									"        // });",
									"    } ",
									"    else if (statusCode == 405) { // Method Not Allowed",
									"        // pm.test(\"Response should be in JSON format for 405\", function () {",
									"        //     pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"        //     pm.response.json(); // Ensures response is valid JSON",
									"        // });",
									"    } ",
									"    ",
									"    else if (statusCode == 404) { // Not Found",
									"         pm.test(\"Response should be in Plain Text format for 404\", function () {",
									"             pm.response.to.have.header(\"Content-Type\", \"text/plain;charset=UTF-8\");",
									"             pm.response.text();",
									"         });",
									"       ",
									"    } ",
									"    else {",
									"        pm.test(\"Unexpected status code: \" + statusCode, function () {",
									"            pm.expect(false).to.be.true; // Forces failure if status is unexpected",
									"        });",
									"    }",
									"});",
									"",
									"const Ajv = require(\"ajv\");",
									"const ajv = new Ajv();",
									"",
									"// Define the expected schema",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"batchDescription\": { \"type\": \"string\" },",
									"        \"batchId\": { \"type\": \"integer\" },",
									"        \"batchName\": { \"type\": \"string\" },",
									"        \"batchNoOfClasses\": { \"type\": \"integer\" },",
									"        \"batchStatus\": { \"type\": \"string\" },",
									"        \"programId\": { \"type\": \"integer\" },",
									"        \"programName\": { \"type\": \"string\" }",
									"    },",
									"    \"required\": [\"batchName\", \"batchNoOfClasses\", \"programId\", \"batchStatus\"]",
									"};",
									"",
									"// Get request & response body",
									"const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"const responseBody = pm.response.json();",
									"",
									"// Log for debugging",
									"console.log(\"Request Body:\", requestBody);",
									"console.log(\"Response Body:\", responseBody);",
									"",
									"// Check status code",
									"// pm.test(\"Status code is 201 Created\", function () {",
									"//     pm.response.to.have.status(201);",
									"// });",
									"",
									"// Validate schema if status is 201",
									"if (pm.response.code == 200) {",
									"    pm.test(\"Response matches expected schema\", function () {",
									"        const validate = ajv.compile(schema);",
									"        const valid = validate(responseBody);",
									"        if (!valid) {",
									"            console.error(validate.errors);",
									"        }",
									"        pm.expect(valid, `Schema validation failed: ${JSON.stringify(validate.errors, null, 2)}`).to.be.true;",
									"    });",
									"",
									"    // Validate that response matches request",
									"    pm.test(\"Validate batchDescription matches request\", function () {",
									"        pm.expect(responseBody.batchDescription).to.equal(requestBody.batchDescription,",
									"            `Batch Description mismatch. Expected: ${requestBody.batchDescription}, Actual: ${responseBody.batchDescription}`);",
									"    });",
									"",
									"    pm.test(\"Validate batchName matches request\", function () {",
									"        pm.expect(responseBody.batchName).to.equal(requestBody.batchName,",
									"            `Batch Name mismatch. Expected: ${requestBody.batchName}, Actual: ${responseBody.batchName}`);",
									"    });",
									"",
									"    pm.test(\"Validate batchNoOfClasses matches request\", function () {",
									"        pm.expect(responseBody.batchNoOfClasses).to.equal(requestBody.batchNoOfClasses,",
									"            `Batch No Of Classes mismatch. Expected: ${requestBody.batchNoOfClasses}, Actual: ${responseBody.batchNoOfClasses}`);",
									"    });",
									"",
									"    pm.test(\"Validate programId matches request\", function () {",
									"        pm.expect(responseBody.programId).to.equal(requestBody.programId,",
									"            `Program Id mismatch. Expected: ${requestBody.programId}, Actual: ${responseBody.programId}`);",
									"    });",
									"",
									"    pm.test(\"Validate batchStatus matches request\", function () {",
									"        pm.expect(responseBody.batchStatus).to.equal(requestBody.batchStatus,",
									"            `Batch Status mismatch. Expected: ${requestBody.batchStatus}, Actual: ${responseBody.batchStatus}`);",
									"    });",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"batchDescription\": \"{{batchDescription}}\",\n\"batchId\": \"{{batchId}}\",\n\"batchName\": \"{{batchname}}\",\n\"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\n\"batchStatus\": \"{{batchStatus}}\",\n\"programId\": \"{{programId}}\",\n\"programName\": \"{{programName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}{{Endpoint}}{{Batch2_id}}",
							"host": [
								"{{base_url}}{{Endpoint}}{{Batch2_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Positive Create users with Role Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\"); \r",
									"\r",
									"if (!TestCaseID.startsWith('U_POST')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"\r",
									"\r",
									"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"\r",
									"    // Add Authorization token\r",
									"    pm.request.headers.add({ key: 'Authorization', value: 'Bearer ' + pm.environment.get('token') });\r",
									"console.log(\"Completed test case:\", TestCaseID)\r",
									"\r",
									"// Generate dynamic phone number and email\r",
									"const randNumber = Math.floor(Math.random() * 10000);\r",
									"const randomDigits = Math.floor(1000000000 + Math.random() * 9000000000); // Ensures 10 random digits\r",
									"const phoneNumber = `+91 ${randomDigits}`;  // Correct format with space\r",
									"const email = `postManLMS${randNumber}@gmail.com`;\r",
									"\r",
									"//  var TestCaseId = pm.iterationData.get('TestCase_ID')\r",
									"//     if (TestCaseId == 'U_POST_TC_03') {\r",
									"//     pm.environment.set(\"user_PhoneNumber_update\", phoneNumber);\r",
									"//     }\r",
									"// Set values to environment variables\r",
									"pm.environment.set(\"user_PhoneNumber\", phoneNumber);\r",
									"pm.environment.set(\"user_LoginEmail\", email);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Validate content-type\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Creating valid variable in Environments \r",
									"if (pm.response.code == 201) {\r",
									"    var TestCaseId = pm.iterationData.get('TestCase_ID');\r",
									"    let responseData = pm.response.json();\r",
									"\r",
									"    if (TestCaseId == 'U_POST_TC_01') {\r",
									"        pm.environment.set(\"createdUserIdAdmin\", responseData.user.userId);\r",
									"    }\r",
									"\r",
									"    if (TestCaseId == 'U_POST_TC_02') {\r",
									"        pm.environment.set(\"createdUserIdStaff\", responseData.user.userId);\r",
									"    }\r",
									"\r",
									"    if (TestCaseId == 'U_POST_TC_03') {\r",
									"        pm.environment.set(\"createdUserIdStudent\", responseData.user.userId);\r",
									"    }\r",
									"\r",
									"    if (TestCaseId == 'U_POST_TC_04') {\r",
									"        pm.environment.set(\"DeleteuserId\", responseData.user.userId);\r",
									"    }\r",
									"}\r",
									"\r",
									"// Schema validation\r",
									"pm.test(\"Response should match the schema\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"user\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"userId\": { \"type\": \"string\" },\r",
									"                    \"userFirstName\": { \"type\": \"string\" },\r",
									"                    \"userLastName\": { \"type\": \"string\" },\r",
									"                    \"userMiddleName\": { \"type\": \"string\" },\r",
									"                    \"userPhoneNumber\": { \"type\": \"string\" },\r",
									"                    \"userLocation\": { \"type\": \"string\" },\r",
									"                    \"userTimeZone\": { \"type\": \"string\" },\r",
									"                    \"userLinkedinUrl\": { \"type\": \"string\" },\r",
									"                    \"userEduUg\": { \"type\": \"string\" },\r",
									"                    \"userEduPg\": { \"type\": \"string\" },\r",
									"                    \"userComments\": { \"type\": \"string\" },\r",
									"                    \"userVisaStatus\": { \"type\": \"string\" },\r",
									"                    \"userLoginEmail\": { \"type\": \"string\" }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"userId\",\r",
									"                    \"userFirstName\",\r",
									"                    \"userLastName\",\r",
									"                    \"userMiddleName\",\r",
									"                    \"userPhoneNumber\",\r",
									"                    \"userLocation\",\r",
									"                    \"userTimeZone\",\r",
									"                    \"userLinkedinUrl\",\r",
									"                    \"userEduUg\",\r",
									"                    \"userEduPg\",\r",
									"                    \"userComments\",\r",
									"                    \"userVisaStatus\",\r",
									"                    \"userLoginEmail\"\r",
									"                ]\r",
									"            },\r",
									"            \"roles\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"roleId\": { \"type\": \"string\" },\r",
									"                        \"userRoleStatus\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"roleId\", \"userRoleStatus\"]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"user\", \"roles\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{user_PhoneNumber}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userLogin\": {\r\n    \"userLoginEmail\": \"{{user_LoginEmail}}\",\r\n    \"loginStatus\": \"{{loginStatus}}\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"if (!TestCaseID.startsWith('U_PUT')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"\r",
									"\r",
									"\r",
									"if (TestCaseID.startsWith('U_PUT')) {\r",
									"    // Set URL using base URL and endpoint from Excel\r",
									"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"\r",
									"     if(TestCaseID == 'U_PUT_TC_24') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"createdUserIdAdmin\");\r",
									"    }\r",
									"\r",
									"    // Add Authorization token\r",
									"    pm.request.headers.add({\r",
									"        key: 'Authorization',\r",
									"        value: 'Bearer ' + pm.environment.get('token')\r",
									"    });\r",
									"\r",
									"    console.log(\" Completed test case:\", TestCaseID);\r",
									"} else {\r",
									"    console.warn(\" Skipped test case:\", TestCaseID);\r",
									"}\r",
									"\r",
									"// Generate dynamic phone number and email\r",
									"const randNumber = Math.floor(Math.random() * 10000);\r",
									"const randomDigits = Math.floor(1000000000 + Math.random() * 9000000000); // Ensures 10 random digits\r",
									"const phoneNumber = `+91 ${randomDigits}`;  // Correct format with space\r",
									"const email = `postManLMS${randNumber}@gmail.com`;\r",
									"\r",
									" var TestCaseId = pm.iterationData.get('TestCase_ID')\r",
									"    if (TestCaseId == 'U_PUT_TC_24') {\r",
									"    pm.environment.set(\"user_PhoneNumber_update\", phoneNumber);\r",
									"    }\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//validate content type \r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//schema validation\r",
									"pm.test(\"Response should match the schema\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"userFirstName\": { \"type\": \"string\", \"minLength\": 1 },\r",
									"            \"userLastName\": { \"type\": \"string\", \"minLength\": 1 },\r",
									"            \"userMiddleName\": { \"type\": \"string\", \"minLength\": 1 },\r",
									"            \"userPhoneNumber\": { \"type\": \"string\", \"pattern\": \"^[0-9]{10}$\" },\r",
									"            \"userLocation\": { \"type\": \"string\", \"minLength\": 1 },\r",
									"            \"userTimeZone\": { \"type\": \"string\" },\r",
									"            \"userLinkedinUrl\": { \"type\": \"string\", \"format\": \"uri\" },\r",
									"            \"userEduUg\": { \"type\": \"string\" },\r",
									"            \"userEduPg\": { \"type\": \"string\" },\r",
									"            \"userComments\": { \"type\": \"string\" },\r",
									"            \"userVisaStatus\": { \"type\": \"string\" },\r",
									"            \"userLoginEmail\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"            \"userId\": { \"type\": \"string\" }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"userFirstName\",\r",
									"            \"userLastName\",\r",
									"            \"userMiddleName\",\r",
									"            \"userPhoneNumber\",\r",
									"            \"userLocation\",\r",
									"            \"userTimeZone\",\r",
									"            \"userLinkedinUrl\",\r",
									"            \"userEduUg\",\r",
									"            \"userEduPg\",\r",
									"            \"userComments\",\r",
									"            \"userVisaStatus\",\r",
									"            \"userLoginEmail\",\r",
									"            \"userId\"\r",
									"        ]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": \"{{user_PhoneNumber_update}}\",\r\n  \"userLocation\": \"{{userLocation}}\",\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\",\r\n   \"userLoginEmail\": \"{{userLoginEmail}}\",\r\n   \"userId\": \"{{userId}}\"\r\n    \r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user roleId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"if (!TestCaseID.startsWith('U_PUT')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"\r",
									"\r",
									"\r",
									"if (TestCaseID.startsWith('U_PUT')) {\r",
									"    // Set URL using base URL and endpoint from Excel\r",
									"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"\r",
									"    // Add Authorization token\r",
									"    pm.request.headers.add({\r",
									"        key: 'Authorization',\r",
									"        value: 'Bearer ' + pm.environment.get('token')\r",
									"    });\r",
									"\r",
									"    console.log(\" Completed test case:\", TestCaseID);\r",
									"} else {\r",
									"    console.warn(\" Skipped test case:\", TestCaseID);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//validate content type \r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//schema validation\r",
									"pm.test(\"Response should match the schema\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"userRoleList\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"roleId\": {\"type\": \"string\"},\r",
									"                        \"userRoleStatus\": {\"type\": \"string\"}\r",
									"                    },\r",
									"                    \"required\": [\"roleId\", \"userRoleStatus\"]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"userRoleList\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"userRoleList\": [\r\n{\r\n\"roleId\": \"{{roleId}}\",\r\n\"userRoleStatus\": \"{{userRoleStatus}}\"\r\n}\r\n]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Login Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"if (!TestCaseID.startsWith('U_PUT')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									" \r",
									"\r",
									"\r",
									"if (TestCaseID.startsWith('U_PUT')) {\r",
									"    // Set URL using base URL and endpoint from Excel\r",
									"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"\r",
									"    if(TestCaseID == 'U_PUT_TC_31') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"createdUserIdAdmin\");\r",
									"    }\r",
									"\r",
									"    // Add Authorization token\r",
									"    pm.request.headers.add({\r",
									"        key: 'Authorization',\r",
									"        value: 'Bearer ' + pm.environment.get('token')\r",
									"    });\r",
									"\r",
									"    console.log(\" Completed test case:\", TestCaseID);\r",
									"} else {\r",
									"    console.warn(\" Skipped test case:\", TestCaseID);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//validate content type \r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//schema validation\r",
									"pm.test(\"Response should match the schema\", function () {\r",
									"    const schema = {\r",
									"        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"loginStatus\": { \"type\": \"string\" },\r",
									"            \"password\": { \"type\": \"string\" },\r",
									"            \"roleIds\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": { \"type\": \"string\" }\r",
									"            },\r",
									"            \"status\": { \"type\": \"string\" },\r",
									"            \"userLoginEmail\": { \"type\": \"string\", \"format\": \"email\" }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"loginStatus\",\r",
									"            \"password\",\r",
									"            \"roleIds\",\r",
									"            \"status\",\r",
									"            \"userLoginEmail\"\r",
									"        ]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"loginStatus\": \"{{loginStatus}}\",\r\n\"password\": \"{{password}}\",\r\n\"roleIds\": [\"{{roleId}}\"\r\n],\r\n\"status\": \"{{status}}\",\r\n\"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User Role Program Batch status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"// Skip request if not a U_PUT test case\r",
									"if (!TestCaseID.startsWith('U_PUT')) {\r",
									"    pm.execution.skipRequest();\r",
									"} else {\r",
									"    // Set URL using base URL and endpoint from Excel\r",
									"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"\r",
									"    // Append userId for specific test case\r",
									"    if (TestCaseID === 'U_PUT_TC_30' && pm.environment.get(\"userId\")) {\r",
									"        pm.request.url += \"/\" + pm.environment.get(\"userId\");\r",
									"    }\r",
									"\r",
									"    // Add Authorization token (only for relevant cases)\r",
									"    if (TestCaseID !== 'U_TC_00') {\r",
									"        pm.request.headers.add({\r",
									"            key: 'Authorization',\r",
									"            value: 'Bearer ' + pm.environment.get('token')\r",
									"        });\r",
									"    }\r",
									"\r",
									"    console.log(\" Completed test case:\", TestCaseID);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//validate content type \r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//schema validation\r",
									"pm.test(\"Response should match the schema\", function () {\r",
									"    const schema = {\r",
									"        \r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": { \"type\": \"integer\" },\r",
									"            \"roleId\": { \"type\": \"string\" },\r",
									"            \"userId\": { \"type\": \"string\" },\r",
									"            \"userRoleProgramBatches\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"batchId\": { \"type\": \"integer\" },\r",
									"                        \"userRoleProgramBatchStatus\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"batchId\", \"userRoleProgramBatchStatus\"]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"programId\", \"roleId\", \"userId\", \"userRoleProgramBatches\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programId\":{{programId}},\r\n\"roleId\": \"{{roleId}}\",\r\n\"userId\": \"{{userId}}\",\r\n\"userRoleProgramBatches\": [\r\n{\r\n\"batchId\": {{batchId}},\r\n\"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\r\n}\r\n]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Positive Update User Role Program Batch status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"// Skip request if not a U_PUT test case\r",
									"if (!TestCaseID.startsWith('U_PUT')) {\r",
									"    pm.execution.skipRequest();\r",
									"}\r",
									"\r",
									"// Set URL using base URL and endpoint from Excel\r",
									"pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"\r",
									"// Append `createdUserId` for TestCase 'U_PUT_TC_29' if defined\r",
									"if (TestCaseID === 'U_PUT_TC_29' && pm.environment.get(\"createdUserIdAdmin\")) {\r",
									"    pm.request.url += \"/\" + pm.environment.get(\"createdUserIdAdmin\");\r",
									"}\r",
									"\r",
									"// Add Authorization token if available\r",
									"const token = pm.environment.get('token');\r",
									"if (token) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Authorization',\r",
									"        value: 'Bearer ' + token\r",
									"    });\r",
									"} else {\r",
									"    console.warn(\"Token is missing or undefined. Request may fail.\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//validate content type \r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//schema validation\r",
									"pm.test(\"Response should match the schema\", function () {\r",
									"    const schema = {\r",
									"        \r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": { \"type\": \"integer\" },\r",
									"            \"roleId\": { \"type\": \"string\" },\r",
									"            \"userId\": { \"type\": \"string\" },\r",
									"            \"userRoleProgramBatches\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"batchId\": { \"type\": \"integer\" },\r",
									"                        \"userRoleProgramBatchStatus\": { \"type\": \"string\" }\r",
									"                    },\r",
									"                    \"required\": [\"batchId\", \"userRoleProgramBatchStatus\"]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\"programId\", \"roleId\", \"userId\", \"userRoleProgramBatches\"]\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programId\":\"{{program1_id}}\",\r\n\"roleId\": \"{{roleId}}\",\r\n\"userId\": \"{{createdUserIdAdmin}}\",\r\n\"userRoleProgramBatches\":[\r\n{\r\n\"batchId\": \"{{Batch1_id}}\",\r\n\"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\r\n}\r\n]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Request User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"if (!TestCaseID.startsWith('U_GET')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"\r",
									"if (TestCaseID.startsWith('U_GET')) {\r",
									"pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"}\r",
									"\r",
									"// Special handling for GET requests with dynamic IDs\r",
									"if (TestCaseID === 'U_GET_TC_14' && pm.environment.get(\"program1_id\")) {\r",
									"    pm.request.url += \"/\" + pm.environment.get(\"program1_id\");\r",
									"}\r",
									"\r",
									"if (TestCaseID === 'U_GET_TC_13' && pm.environment.get(\"Batch1_id\")) {\r",
									"    pm.request.url += \"/\" + pm.environment.get(\"Batch1_id\");\r",
									"}\r",
									"\r",
									"if (TestCaseID === 'U_GET_TC_10' && pm.environment.get(\"createdUserIdAdmin\")) {\r",
									"    pm.request.url += \"/\" + pm.environment.get(\"createdUserIdAdmin\");\r",
									"}\r",
									"\r",
									"// Add Authorization token for required test cases\r",
									"if (!['U_GET_TC_06', 'U_GET_TC_18', 'U_GET_TC_21', 'U_GET_TC_22'].includes(TestCaseID)) {\r",
									"    pm.request.headers.add({\r",
									"        key: 'Authorization',\r",
									"        value: 'Bearer ' + pm.environment.get('token')\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"// if (!['U_GET_TC_06','U_GET_TC_06','U_GET_TC_17', 'U_GET_TC_20', 'U_GET_TC_22'].includes(TestCaseID)) {\r",
									"    \r",
									"//     pm.test(\"Response is in JSON format\", function () {\r",
									"//         pm.response.to.have.header(\"Content-Type\");\r",
									"//         pm.response.to.be.json(); // Add parentheses here\r",
									"//     });\r",
									"\r",
									"//     pm.test(\"Content-Type is JSON\", function () {\r",
									"//         pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"//     });\r",
									"// }\r",
									"\r",
									"\r",
									"\r",
									"     \r",
									"    \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"\r",
									"// if (TestCaseID.startsWith('U_')) { // Only program related test cases\r",
									"\r",
									"    // If the test case is not related to Program GET, we will skip the execution\r",
									"    if (!TestCaseID.startsWith('U_DEL')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"\r",
									"// // Set the url using base url and endpoint from excel\r",
									"// pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"\r",
									"if(TestCaseID == 'U_DEL_TC_32') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"DeleteuserId\");\r",
									"    }\r",
									"\r",
									"    if (TestCaseID != 'U_TC_00') { // Do not set token for test case 04, as it is No Auth validation case\r",
									"       pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization')\r",
									"    }\r",
									"\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//validate content type \r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is JSON\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}{{DeleteuserId}}",
							"host": [
								"{{base_url}}{{DeleteuserId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
							"if (TestCaseID.startsWith('U_')) {\r",
							"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
							"}\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"\r",
							" console.log(\"Completed test case:\" + pm.iterationData.get('TestCase_ID'));\r",
							"\r",
							"\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Class",
			"item": [
				{
					"name": "Positive Create class",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"\r",
									"    // If the test case is not related to class operations, skip the execution\r",
									"    if (!TestCaseID.startsWith('C_POST_TC_')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"\r",
									"    // Set the URL using base URL and endpoint from the CSV\r",
									"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"\r",
									"    // Handle specific test cases with dynamic URL construction\r",
									"    if (TestCaseID == 'C_POST_TC_A_1') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"createdUserIdStaff\");\r",
									"    }\r",
									"\r",
									"\r",
									"        pm.request.headers.add({\r",
									"            key: 'Authorization',\r",
									"            value: 'Bearer ' + pm.environment.get('token')\r",
									"        });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//folder level\r",
									"console.log(\"Completed test case:\" + pm.iterationData.get('TestCase_ID'));\r",
									"\r",
									"var statusline = pm.iterationData.get('expectedstatusline');\r",
									"pm.test(\"expectedstatusline\" + pm.response.status, ()=>{\r",
									"    pm.response.to.have.status(statusline);\r",
									"})\r",
									"\r",
									"var expectedStatusCode = pm.iterationData.get('Response_Status_Code');\r",
									"pm.test(\"status code is \" + pm.response.status,() => {\r",
									"    pm.response.to.have.status(expectedStatusCode);\r",
									"});\r",
									"\r",
									"\r",
									"// Handle successful responses (201)\r",
									"if (pm.response.code == 201) {\r",
									"    // var jsonData = pm.response.json();\r",
									"    // var TestCaseId = pm.iterationData.get('TestCase_ID');\r",
									"\r",
									"    // save the R03 Studendt\r",
									"var TestCaseId = pm.iterationData.get('TestCase_ID')\r",
									"if(TestCaseId == ('C_POST_TC_A_1')){\r",
									"let responseData = pm.response.json();\r",
									"pm.environment.set(\"classCsID\", responseData.csId);\r",
									"}\r",
									"\r",
									"\r",
									" }\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": \"{{Batch1_id}}\",\r\n  \"classNo\": \"{{classNo}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"classStaffId\": \"{{createdUserIdStaff}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"classScheduledDates\": [\"{{classDate}}\"]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create class",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"if (TestCaseID.startsWith('C_')) { // Only program related test cases\r",
									"\r",
									"    // If the test case is not related to Program GET, we will skip the execution\r",
									"    if (!TestCaseID.startsWith('C_POST')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"\r",
									"// Set the url using base url and endpoint from excel\r",
									"pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"\r",
									"\r",
									"    if (TestCaseID != 'C_POST_TC_02') { \r",
									"        pm.request.headers.add('Bearer ' + pm.environment.get('token'), 'Authorization')\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var expectedStatusCode = pm.iterationData.get('Response_Status_Code');\r",
									"\r",
									"// Validate the response status code\r",
									"pm.test(\"Status code is \" + expectedStatusCode, function () {\r",
									"    pm.response.to.have.status(expectedStatusCode);\r",
									"});\r",
									"\r",
									"// Handle successful responses (201)\r",
									"if (pm.response.code === 201) {\r",
									"    var jsonData = pm.response.json();\r",
									"    var TestCaseId = pm.iterationData.get('TestCase_ID');\r",
									"\r",
									"    // Set environment variables based on the test case\r",
									"    if (TestCaseId === 'C_TC_01') {\r",
									"        pm.environment.set(\"program1_id\", jsonData.programId);\r",
									"    } else if (TestCaseId === 'C_TC_02') {\r",
									"        pm.environment.set(\"Programname\", jsonData.programName);\r",
									"    } else if (TestCaseId === 'C_TC_03') {\r",
									"        pm.environment.set(\"program2_id\", jsonData.programId);\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": \"{{batchId}}\",\r\n  \"classNo\": \"{{classNo}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"classStaffId\": \"{{classStaffId}}\",\r\n  \"classDescription\": \"{{classDescription}}\",\r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"classScheduledDates\": [\"{{classDate}}\"]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Class",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" if(TestCaseID == 'C_GET_TC_10') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"User_Class_Id\");\r",
									"    }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"// // Check if TestCaseID is defined and not null\r",
									"// if (TestCaseID && typeof TestCaseID === 'string' && TestCaseID.startsWith('C_GET_TC_')) { // Only class-related test cases\r",
									"\r",
									"    // If the test case is not related to class operations, skip the execution\r",
									"    if (!TestCaseID.startsWith('C_GET_TC_')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"\r",
									"    // Set the URL using base URL and endpoint from the CSV\r",
									"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"\r",
									"    // Handle specific test cases with dynamic URL construction\r",
									"    if (TestCaseID == 'C_GET_TC_10') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.iterationData.get(\"batchId\");\r",
									"    }\r",
									"\r",
									"    if (TestCaseID == 'C_GET_TC_13') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"Batch1_id\");\r",
									"    }\r",
									"\r",
									"    if (TestCaseID == 'C_GET_TC_14') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint'); //+ \"/\" + pm.iterationData.get(\"batchId\");\r",
									"    }\r",
									"\r",
									"    if (TestCaseID == 'C_GET_TC_15') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"    }\r",
									"\r",
									"    if (TestCaseID =='C_GET_TC_17') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"    }\r",
									"\r",
									"    // Add Authorization header for test cases that require it\r",
									"    // if (!['C_GET_TC_06', 'C_GET_TC_07', 'C_GET_TC_09', 'C_GET_TC_12'].includes(TestCaseID)) {\r",
									"        pm.request.headers.add({\r",
									"            key: 'Authorization',\r",
									"            value: 'Bearer ' + pm.environment.get('token')\r",
									"        });\r",
									"    // }\r",
									"\r",
									"// // else {\r",
									"//     // Handle the case where TestCaseID is undefined, not a string, or does not start with 'C_GET_TC_'\r",
									"//     console.error(\"TestCaseID is undefined, not a string, or does not start with 'C_GET_TC_'\");\r",
									"//     // pm.execution.skipRequest();\r",
									"// }\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"batchId\":  9499,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-03-17T19:04:41.220Z\",\r\n\"classTopic\": \"pythonbasic\",\r\n\"classStatus\": \"Active\",\r\n\"classStaffId\": \"U25\",\r\n\"classDescription\": \"WebAutomation\",\r\n\"classComments\": \"\",\r\n\"classNotes\": \"available\",\r\n\"classRecordingPath\": \"string\",\r\n\"classScheduledDates\": [\r\n\"2025-03-21T19:04:41.220Z\"\r\n]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test(\"update_class validation\",()=>{\r",
									"\r",
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"// // Check if TestCaseID is defined and not null\r",
									"// if (TestCaseID && typeof TestCaseID === 'string' && TestCaseID.startsWith('C_GET_TC_')) { // Only class-related test cases\r",
									"\r",
									"    // If the test case is not related to class operations, skip the execution\r",
									"    if (!TestCaseID.startsWith('C_PUT')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"\r",
									"    // Set the URL using base URL and endpoint from the CSV\r",
									"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"\r",
									"    // Handle specific test cases with dynamic URL construction\r",
									"    if (TestCaseID == 'C_PUT_TC_19') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
									"    }\r",
									"\r",
									"    if (TestCaseID == 'C_PUT_TC_20') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"Batch1_id\");\r",
									"    }\r",
									"\r",
									"    if (TestCaseID == 'C_PUT_TC_21') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint'); //+ \"/\" + pm.iterationData.get(\"batchId\");\r",
									"    }\r",
									"\r",
									"    if (TestCaseID == 'C_PUT_TC_22') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"User_Class_Id\");\r",
									"    }\r",
									"\r",
									"    if (TestCaseID =='C_PUT_TC_23') {\r",
									"        pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint') + \"/\" + pm.environment.get(\"User_Class_Id\");\r",
									"    }\r",
									"\r",
									"    // Add Authorization header for test cases that require it\r",
									"    if (![ 'C_PUT_TC_21'].includes(TestCaseID)) {\r",
									"        pm.request.headers.add({\r",
									"            key: 'Authorization',\r",
									"            value: 'Bearer ' + pm.environment.get('token')\r",
									"        });\r",
									"    }\r",
									"\r",
									"else {\r",
									"    // Handle the case where TestCaseID is undefined, not a string, or does not start with 'C_GET_TC_'\r",
									"    console.error(\"TestCaseID is undefined, not a string, or does not start with 'C_PUT_TC_'\");\r",
									"    pm.execution.skipRequest();\r",
									"}}\r",
									")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"batchId\":  9499,\r\n\"classNo\": 1,\r\n\"classDate\": \"2025-03-17T19:04:41.220Z\",\r\n\"classTopic\": \"pythonbasic\",\r\n\"classStatus\": \"Active\",\r\n\"classStaffId\": \"U25\",\r\n\"classDescription\": \"WebAutomation\",\r\n\"classComments\": \"\",\r\n\"classNotes\": \"available\",\r\n\"classRecordingPath\": \"string\",\r\n\"classScheduledDates\": [\r\n\"2025-03-21T19:04:41.220Z\"\r\n]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}",
							"host": [
								"{{base_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DEL REQUEST",
					"request": {
						"method": "DELETE",
						"header": []
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
							"\r",
							"// If the test case is not related to Program, we will skip the execution\r",
							"if (!TestCaseID.startsWith('C_')) {\r",
							"    pm.execution.skipRequest();\r",
							"}\r",
							"\r",
							"// Set the url using base url and endpoint from excel\r",
							"if (TestCaseID.startsWith('C_')) {\r",
							"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"console.log(\"Completed test case:\" + pm.iterationData.get('TestCase_ID'));\r",
							"\r",
							"var statusline = pm.iterationData.get('expectedstatusline');\r",
							"pm.test(\"expectedstatusline\" + pm.response.status, ()=>{\r",
							"    pm.response.to.have.status(statusline);\r",
							"})\r",
							"\r",
							"var expectedStatusCode = pm.iterationData.get('Response_Status_Code');\r",
							"pm.test(\"status code is \" + pm.response.status,() => {\r",
							"    pm.response.to.have.status(expectedStatusCode);\r",
							"});\r",
							"\r",
							"pm.response.statusline"
						]
					}
				}
			]
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
									"\r",
									"if (TestCaseID.startsWith('L_')) { // Only program related test cases\r",
									"\r",
									"    // If the test case is not related to Program GET, we will skip the execution\r",
									"    if (!TestCaseID.startsWith('L_GET')) {\r",
									"        pm.execution.skipRequest();\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}logoutlms",
							"host": [
								"{{base_url}}logoutlms"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Retrieve the TestCase_ID from iteration data\r",
					"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
					"\r",
					"// Log TestCase_ID for debugging\r",
					"console.log(\"TestCaseID:\", TestCaseID);\r",
					"\r",
					"// Check if TestCase_ID starts with 'U_' and is not in the excluded list\r",
					"if (TestCaseID.startsWith('U_')) {\r",
					"    if (!['U_GET_TC_06','U_GET_TC_18', 'U_GET_TC_21', 'U_GET_TC_23'].includes(TestCaseID)) {\r",
					"        // Add Authorization header for all requests except the specified test cases\r",
					"        pm.request.headers.add({\r",
					"            key: 'Authorization',\r",
					"            value: 'Bearer ' + pm.environment.get('token')\r",
					"        });\r",
					"        console.log(\"Authorization header added for:\", TestCaseID);\r",
					"    } else {\r",
					"        console.log(\"No Authorization header for:\", TestCaseID);\r",
					"    }\r",
					"} \r",
					"\r",
					"//Check if TestCase_ID starts with 'C_' and is not in the excluded list\r",
					"if (TestCaseID.startsWith('C_')) {\r",
					"    if (!['C_POST_TC_02','C_POST_TC_12','C_PUT_TC_21','C_DEL_TC_26'].includes(TestCaseID)) {\r",
					"        // Add Authorization header for all requests except the specified test cases\r",
					"        pm.request.headers.add({\r",
					"            key: 'Authorization',\r",
					"            value: 'Bearer ' + pm.environment.get('token')\r",
					"        });\r",
					"        console.log(\"Authorization header added for:\", TestCaseID);\r",
					"    } else {\r",
					"        console.log(\"No Authorization header for:\", TestCaseID);\r",
					"    }\r",
					"} \r",
					"\r",
					"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
					"\r",
					"// Include both 'U_' and 'L_' prefixed test cases\r",
					"if (TestCaseID.startsWith('U_')  || TestCaseID.startsWith('L_') || TestCaseID.startsWith('P_') || TestCaseID.startsWith('C_')) {\r",
					"    pm.request.url = pm.environment.get('base_url') + pm.iterationData.get('Endpoint');\r",
					"    console.log(\"URL set to:\", pm.request.url);\r",
					"} else {\r",
					"    console.warn(\"Skipping request for TestCaseID:\", TestCaseID);\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Retrieve the TestCase_ID\r",
					"var TestCaseID = pm.iterationData.get(\"TestCase_ID\");\r",
					"\r",
					"// Run validation only for \"U_\" prefixed test cases\r",
					"if (TestCaseID.startsWith('U_')) {\r",
					"    console.log(\"Completed test case:\", TestCaseID);\r",
					"\r",
					"    // Status Line Validation\r",
					"    var expectedStatusLine = pm.iterationData.get('expectedstatusline');\r",
					"    if (expectedStatusLine) {\r",
					"        pm.test(\"Expected status line is \" + expectedStatusLine, () => {\r",
					"            pm.response.to.have.status(expectedStatusLine);\r",
					"        });\r",
					"    } else {\r",
					"        console.warn(\"Expected status line is missing for TestCaseID:\", TestCaseID);\r",
					"    }\r",
					"\r",
					"    // Status Code Validation\r",
					"    var expectedStatusCode = pm.iterationData.get('Response_Status_Code');\r",
					"    if (expectedStatusCode) {\r",
					"        pm.test(\"Status code is \" + expectedStatusCode, () => {\r",
					"            pm.response.to.have.status(parseInt(expectedStatusCode)); // Ensure it's treated as a number\r",
					"        });\r",
					"    } else {\r",
					"        console.warn(\"Expected status code is missing for TestCaseID:\", TestCaseID);\r",
					"    }\r",
					"\r",
					"   \r",
					"\r",
					"   \r",
					"}\r",
					""
				]
			}
		}
	]
}